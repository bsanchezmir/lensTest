name: Patch vulnerable images

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        images:
          - "docker.io/library/alpine:3.18.4"
          - "docker.io/openpolicyagent/opa:0.46.0"
          - "docker.io/library/hello-world:latest"

    steps:
      # 1. Trivy scan for OS-level vulnerabilities
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca
        with:
          scan-type: "image"
          format: "json"
          output: "report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ matrix.images }}

      # 2. Count fixable vulnerabilities
      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="report.json"
          vuln_count=$(jq 'if .Results then [
              .Results[]
              | select(.Class=="os-pkgs" and .Vulnerabilities!=null)
              | .Vulnerabilities[]
            ] | length else 0 end' "$report_file")
          echo "Detected $vuln_count fixable OS vulnerabilities in ${{ matrix.images }}"
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      # 3. Patch (COPA) if vulnerabilities exist
      - name: Run Copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        uses: project-copacetic/copa-action@main
        with:
          image: ${{ matrix.images }}
          image-report: "report.json"
          patched-tag: "patched"
          timeout: "5m"
          output: vex.json
          format: "openvex"

      # 4. Generate a file listing patched CVEs (if COPA ran successfully)
      - name: Collect patched CVEs
        if: steps.copa.conclusion == 'success'
        run: |
          if [ -f vex.json ]; then
            sudo chmod 644 vex.json

            echo "=== Parsing vex.json for ${{ matrix.images }} ==="
            PATCHED_CVES=$(jq -r '
              .statements
              | map(select(.status == "fixed"))
              | .[].vulnerability.id
            ' vex.json)

            if [ -n "$PATCHED_CVES" ]; then
              echo "CVEs patched in ${{ matrix.images }}:"
              echo "$PATCHED_CVES"
              echo "$PATCHED_CVES" > cves_fixed.txt
            else
              echo "No CVEs were marked as 'fixed' in vex.json."
              echo "None" > cves_fixed.txt
            fi
          else
            echo "No vex.json found. Possibly no patches applied."
            echo "None" > cves_fixed.txt

      # 5. Create artifact name via a shell step (to avoid 'replace()')
      - name: Create artifact name
        id: artifact_name
        run: |
          # Convert slashes and colons to dashes using 'tr'
          SANITIZED=$(echo "${{ matrix.images }}" | tr '/:' '-')
          ARTIFACT_NAME="patched-details-${SANITIZED}"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      # 6. Upload artifacts (Trivy report and cves_fixed.txt)
      - name: Upload artifacts
        if: steps.copa.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact_name.outputs.artifact_name }}
          path: |
            report.json
            cves_fixed.txt
          if-no-files-found: ignore

      # 7. Log in to GHCR if COPA succeeded
      - name: Login to GHCR
        if: steps.copa.conclusion == 'success'
        id: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 8. Push patched image to GHCR
      - name: Push patched image
        if: steps.login.conclusion == 'success'
        run: |
          SANITIZED_TAG=$(echo "${{ matrix.images }}" | tr '/:' '-')
          REPO_OWNER="${{ github.repository_owner }}"
          FINAL_IMAGE="ghcr.io/${REPO_OWNER}/copa-patched:${SANITIZED_TAG}"

          echo "Retagging ${{ steps.copa.outputs.patched-image }} => $FINAL_IMAGE"
          docker tag ${{ steps.copa.outputs.patched-image }} "$FINAL_IMAGE"
          docker push "$FINAL_IMAGE"
