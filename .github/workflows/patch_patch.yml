name: Patch vulnerable images
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        images:
          - "docker.io/library/alpine:3.18.4"
          - "docker.io/openpolicyagent/opa:0.46.0"
          - "docker.io/library/hello-world:latest"

    steps:
      # 1. Trivy scan for fixable OS vulnerabilities
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca
        with:
          scan-type: "image"
          format: "json"
          output: "report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ matrix.images }}

      # 2. Check vulnerability count
      - name: Check vulnerability count
        id: vuln_count
        run: |
          vuln_count=$(jq 'if .Results then [
              .Results[] 
              | select(.Class=="os-pkgs" and .Vulnerabilities!=null) 
              | .Vulnerabilities[]
            ] | length else 0 end' report.json)
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT
          echo "Detected $vuln_count fixable OS vulnerabilities for ${{ matrix.images }}"

      # 3. Run COPA if we have fixable vulnerabilities
      - name: Run Copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        uses: project-copacetic/copa-action@main
        with:
          image: ${{ matrix.images }}
          image-report: "report.json"
          patched-tag: "patched"
          timeout: "5m"
          output: vex.json
          format: "openvex"

      # 4. Print vex.json (if generated) so you see if any CVEs were actually fixed
      - name: Print vex.json
        if: steps.copa.conclusion == 'success'
        run: |
          if [ -f vex.json ]; then
            sudo chmod 644 vex.json
            echo "=== vex.json contents for ${{ matrix.images }} ==="
            cat vex.json
          else
            echo "No vex.json found."
          fi

      # 5. Upload vex.json as artifact under a safe name (no colons/slashes)
      - name: Upload vex.json artifact
        if: steps.copa.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: vex-json
          path: vex.json
          if-no-files-found: ignore

      # 6. Log in to GHCR (only if COPA succeeded)
      - name: Login to GHCR
        if: steps.copa.conclusion == 'success'
        id: login
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Push patched image (if any)
      - name: Push patched image
        if: steps.login.conclusion == 'success'
        run: |
          echo "Retagging and pushing patched image for ${{ matrix.images }}"
          docker tag ${{ steps.copa.outputs.patched-image }} ghcr.io/project-copacetic/copa-action/test/${{ steps.copa.outputs.patched-image }}
          docker push ghcr.io/project-copacetic/copa-action/test/${{ steps.copa.outputs.patched-image }}
