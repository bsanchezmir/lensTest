name: Patch vulnerable images

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      #max-parallel: 2
      matrix:
        images:
          - "docker.io/library/alpine:3.18.4"
          - "docker.io/openpolicyagent/opa:0.46.0"
          - "docker.io/library/hello-world:latest"
          - "ghcr.io/aquasecurity/trivy-operator:0.16.1"
          - "quay.io/k8slens/bored-agent:0.12.8"
          - "quay.io/k8slens/recurly-api-proxy:0.5.3"

    steps:
      # 1. Trivy scan for OS-level vulnerabilities
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca
        with:
          scan-type: "image"
          format: "json"
          output: "report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ matrix.images }}

      # 2. Extract CVE, Severity, and Title from Trivy's report.json
      - name: Extract CVEs from Trivy Report
        run: |
          echo "=== Extracting OS-level CVEs from Trivy report ==="
          jq -r '
            (.Results? // [])
            | map(select(.Class == "os-pkgs" and .Vulnerabilities != null))
            | .[]
            | .Vulnerabilities[]?
            | "CVE: \(.VulnerabilityID // "N/A"), Severity: \(.Severity // "N/A"), Title: \(.Title // "N/A")"
          ' report.json > cves_report.txt

          echo "Contents of cves_report.txt:"
          cat cves_report.txt



      # 3. Check vulnerability count for fixable vulns
      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="report.json"
          vuln_count=$(jq 'if .Results then [
              .Results[]
              | select(.Class=="os-pkgs" and .Vulnerabilities!=null)
              | .Vulnerabilities[]
            ] | length else 0 end' "$report_file")

          echo "Detected $vuln_count *fixable* OS vulnerabilities in ${{ matrix.images }}"
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      # 4. Patch (COPA) if fixable vulnerabilities exist
      - name: Run Copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        uses: project-copacetic/copa-action@main
        with:
          image: ${{ matrix.images }}
          image-report: "report.json"
          patched-tag: "patched"
          timeout: "5m"
          output: vex.json
          format: "openvex"

      # 5. Log in to GHCR if COPA ran
      - name: Login to GHCR
        if: steps.copa.conclusion == 'success'
        id: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6. Push patched image to GHCR
      - name: Push patched image
        if: steps.login.conclusion == 'success'
        run: |
          # Sanitize the matrix.images name so it can be used in a Docker tag
          SANITIZED_TAG=$(echo "${{ matrix.images }}" | tr '/:' '-')
          REPO_OWNER="${{ github.repository_owner }}"
          FINAL_IMAGE="ghcr.io/${REPO_OWNER}/copa-patched:${SANITIZED_TAG}"

          echo "Retagging ${{ steps.copa.outputs.patched-image }} => $FINAL_IMAGE"
          docker tag ${{ steps.copa.outputs.patched-image }} "$FINAL_IMAGE"
          docker push "$FINAL_IMAGE"

      # 7. Create artifact name from the matrix image
      - name: Create artifact name
        id: artifact_name
        run: |
          SANITIZED_IMG=$(echo "${{ matrix.images }}" | tr '/:' '-')
          echo "artifact_name=trivy-and-cves-${SANITIZED_IMG}" >> $GITHUB_OUTPUT

      # 8. Upload artifacts (Trivy report.json & cves_report.txt)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_name.outputs.artifact_name }}
          path: |
            report.json
            cves_report.txt
          if-no-files-found: ignore
