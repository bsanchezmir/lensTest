name: Patch vulnerable images

on:
  # Customize these triggers as needed:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        images:
          - "docker.io/library/alpine:3.18.4"
          - "docker.io/openpolicyagent/opa:0.46.0"
          - "docker.io/library/hello-world:latest"

    steps:
      # 1. Generate Trivy report for each matrix image
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca
        with:
          scan-type: "image"
          format: "json"
          output: "report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ matrix.images }}

      # 2. Check whether there are any fixable OS package vulnerabilities
      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="report.json"
          vuln_count=$(jq 'if .Results then [
              .Results[]
              | select(.Class=="os-pkgs" and .Vulnerabilities!=null)
              | .Vulnerabilities[]
            ] | length else 0 end' "$report_file")

          echo "Detected $vuln_count fixable OS vulnerabilities in ${{ matrix.images }}"
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      # 3. Run COPA action (patch) only if vulnerabilities were found
      - name: Run Copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        uses: project-copacetic/copa-action@main
        with:
          image: ${{ matrix.images }}
          image-report: "report.json"
          patched-tag: "patched"
          timeout: "5m" # optional, default is 5m
          output: "vex.json" # We'll parse this to see which CVEs were fixed
          format: "openvex"  # optional, default is openvex

      # 4. Fix permissions on vex.json so we can read it
      - name: Fix vex.json permissions
        if: steps.copa.conclusion == 'success'
        run: |
          # Only chmod if vex.json actually exists
          if [ -f vex.json ]; then
            sudo chmod 644 vex.json
          else
            echo "No vex.json found. Possibly no patch was generated or no vulnerabilities were fixed."
          fi

      # 5. Show which CVEs were patched
      - name: Show patched CVEs
        if: steps.copa.conclusion == 'success'
        run: |
          echo "===== CVEs patched in ${{ matrix.images }} ====="
          jq -r '
            .statements
            | map(select(.status == "fixed"))
            | .[].vulnerability.id
          ' vex.json

      # 6. Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        if: steps.copa.conclusion == 'success' || steps.vuln_count.outputs.vuln_count == '0'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Push either the patched image (if any) or the original
      - name: Push patched image
        if: steps.login.conclusion == 'success'
        run: |
          if [ "${{ steps.vuln_count.outputs.vuln_count }}" = "0" ]; then
            echo "No fixable vulnerabilities. Pushing original: ${{ matrix.images }}"
            docker pull ${{ matrix.images }}
            # replace slashes and colons to create a valid tag suffix
            SANITIZED_TAG=$(echo "${{ matrix.images }}" | tr '/:' '-')
            TARGET="ghcr.io/${{ github.repository_owner }}/patched-${SANITIZED_TAG}:latest"
            docker tag "${{ matrix.images }}" "$TARGET"
          else
            PATCHED_LOCAL="${{ steps.copa.outputs.patched-image }}"
            # replace slashes and colons to create a valid tag suffix
            SANITIZED_TAG=$(echo "${{ matrix.images }}" | tr '/:' '-')
            TARGET="ghcr.io/${{ github.repository_owner }}/patched-${SANITIZED_TAG}:latest"
            docker tag "$PATCHED_LOCAL" "$TARGET"
          fi

          echo "Pushing $TARGET..."
          docker push "$TARGET"
